
#ifndef BOE_CONNECTION_H
#define BOE_CONNECTION_H

#include "config.h"

#if !defined (BOE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* BOE_LACKS_PRAGMA_ONCE */

// Include files
#include "config_IM.h"
#include "BOE/IO/Networks/BOE_SOCK.H"
#include "DataHeader.H"
#include "BOE/counter_ptr.hpp"

/**
 */
_im_begin

class BOE_IM_Buffer
{
public:
	virtual ~BOE_IM_Buffer() {}
	virtual bool read( bool& ) = 0;
	virtual void read( Byte& ) = 0;
	virtual void read( Int16& ) = 0;
	virtual void read( Int32& ) = 0;
	virtual void read( Int64& ) = 0;
	virtual void read( Float& ) = 0;
	virtual void read( Double& ) = 0;
	virtual void read( void* const Blob, size_t &len ) = 0;

	virtual void write( bool ) = 0;
	virtual void write( Byte ) = 0;
	virtual void write( Int16 ) = 0;
	virtual void write( Int32 ) = 0;
	virtual void write( Int64 ) = 0;
	virtual void write( Float ) = 0;
	virtual void write( Double ) = 0;
	virtual void write( const void* Blob, size_t &len ) = 0;

	virtual _networks iovec* rawBuffer() = 0;
	virtual size_t rawBufferCount() = 0;

	virtual const DataHeader& Header() const = 0;
};

typedef counter_ptr< BOE_IM_Buffer > BOE_IM_Buffer_Ptr;

class BOE_Connection_Read_Result
{
public:
	virtual ~BOE_Connection_Read_Result(){}

	virtual BOE_IM_Buffer_Ptr buffer() = 0;

	virtual 
};

class BOE_Connection_Handler
{
public:

	virtual ~BOE_Connection_Handler(){}

	void onRead( BOE_Connection_Read_Result& result , );

	void onWrite( BOE_Connection_Write_Result& result );
};

class BOE_Connection
{
public:
	virtual ~BOE_Connection(){}

	bool read( BOE_Connection_Handler& handler );

	bool write( BOE_Connection_Handler& handler, const void* buffer, size_t len );
};

_im_begin

#endif // BOE_CONNECTION_H