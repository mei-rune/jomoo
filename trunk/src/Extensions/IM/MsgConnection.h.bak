
#ifndef MSGCONNECTION_H
#define MSGCONNECTION_H

#include "config.h"

#if !defined (BOE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* BOE_LACKS_PRAGMA_ONCE */

// Include files
#include "config_IM.h"
#include "BOE/IO/IO.H"
#include "BOE/BOE_Buffer.H"
#include "Transport_Protocol_Handler.H"
#include "Instance_IM.H"

/**
 */
_im_begin


class Msg_Connection;
class Msg_Connection_Handler;


class Packet_Buffer
{
public:

	virtual ~Packet_Buffer(){}

	virtual const iovec* rd_vec( ) const = 0;
	virtual size_t rd_size( ) const = 0;
	virtual size_t length( ) const = 0;

	/// 重分配内存
	virtual void resize( size_t len, size_t hl ) = 0;
	/// 清空数据
	virtual void clear();

	DECLARE_NO_COPY_CLASS( Packet_Buffer );
};

typedef Packet_Buffer Bit_Read_Buffer;
typedef Packet_Buffer Bit_Write_Buffer;

//class Bit_Read_Buffer : public BOE_Read_Buffer
//{
//public:
//
//	virtual ~Bit_Read_Buffer(){}
//
//protected:
//	virtual iovec* rd_vec( ) = 0;
//	virtual size_t rd_size( ) const = 0;
//	virtual size_t length( ) const = 0;
//
//	/// 重分配内存
//	virtual void resize( size_t len, size_t hl ) = 0;
//	/// 清空数据
//	virtual void clear();
//
//	friend class Transport_Read_Protocol_Handler;
//	friend class Transport_Write_Protocol_Handler;
//
//	DECLARE_NO_COPY_CLASS( Bit_Read_Buffer );
//};
//
//class Bit_Write_Buffer : public BOE_Write_Buffer
//{
//public:
//
//	virtual ~Bit_Write_Buffer(){}
//protected:
//	virtual const iovec* rd_vec( ) const = 0;
//	virtual const size_t rd_size( ) const = 0;
//	virtual size_t length( ) const = 0;
//
//	friend class Transport_Read_Protocol_Handler;
//	friend class Transport_Write_Protocol_Handler;
//
//	DECLARE_NO_COPY_CLASS( Bit_Write_Buffer );
//};


//class Bit_Read_Stream : public BOE_Read_Stream
//{
//public:
//	Bit_Read_Stream( Bit_Read_Buffer* buf )
//		: BOE_Read_Stream( buf )
//		, buf_( buf )
//	{
//	}
//protected:
//	Bit_Read_Buffer* rbuf()
//	{
//		return buf_;
//	}
//
//	Bit_Read_Buffer* buf_;
//	friend class Msg_Connection;
//};
//
//class Bit_Write_Stream : public BOE_Write_Stream
//{
//public:
//	Bit_Write_Stream( Bit_Write_Buffer* buf )
//		: BOE_Write_Stream( buf )
//		, buf_( buf )
//	{
//	}
//protected:
//	Bit_Write_Buffer* wbuf()
//	{
//		return buf_;
//	}
//private:
//	Bit_Write_Buffer* buf_;
//	friend class Msg_Connection;
//};
//
//class Bit_Stream : public Bit_Read_Stream
//	, public Bit_Write_Stream
//{
//public:
//	Bit_Stream( Bit_Read_Buffer* rbuf , Bit_Write_Buffer* wbuf )
//		: Bit_Read_Stream( rbuf )
//		, Bit_Write_Stream( wbuf )
//	{
//	}
//};

class Msg_Asynch_Result
{
public:

	Msg_Asynch_Result( void* act );
	virtual ~Msg_Asynch_Result();
	
	bool success( ) const;
	int error() const;
	void* act( );
	const void* act() const;

	void set( bool success,int error,void* act );

private:
	bool success_;
	int error_;
	void* act_;
	DECLARE_NO_COPY_CLASS( Msg_Asynch_Result );
};

class Msg_Write_Result : public Msg_Asynch_Result
{
public:

	Msg_Write_Result( const Bit_Write_Buffer& buf
		, Msg_Connection_Handler& handler
		, Msg_Connection& conn 
		, void* act = 0 );
	
	const Bit_Write_Buffer& buffer();
	Msg_Connection_Handler& handler();
	Msg_Connection& connection();
private:
	const Bit_Write_Buffer& buffer_;
	Msg_Connection_Handler& handle_;
	Msg_Connection& conn_;
	DECLARE_NO_COPY_CLASS( Msg_Write_Result );

};

class Msg_Read_Result : public Msg_Asynch_Result
{
public:

	Msg_Read_Result( Bit_Read_Buffer& buf
		, Msg_Connection_Handler& handler
		, Msg_Connection& conn
		, void* act = 0 );
	
	Bit_Read_Buffer& buffer();
	Msg_Connection_Handler& handler();
	Msg_Connection& connection();

private:
	Bit_Read_Buffer& buffer_;
	Msg_Connection_Handler& handle_;
	Msg_Connection& conn_;
	DECLARE_NO_COPY_CLASS( Msg_Read_Result );
};

class Msg_Connection_Handler 
{
public:
	virtual ~Msg_Connection_Handler(){}

	virtual void onWriteMessage( Msg_Write_Result& result ) = 0;

	virtual void onReadMessage( Msg_Read_Result& result ) = 0;
	virtual void onReadPresent( Msg_Read_Result& result ) = 0;
	virtual void onReadIQ( Msg_Read_Result& result ) = 0;
	virtual void onReadX( Msg_Read_Result& result ) = 0;
	virtual void onException( Msg_Read_Result& result ) = 0;
};

class Msg_Connection 
{
public:
	typedef IMLoggerPtr LoggerPtr;

	Msg_Connection( Instance_IM& instance,BOE_Transport_Ptr transport, const tchar* name = 0 );

	~Msg_Connection(void);

	int open( );

	void close( );

	BOE_Transport& transport();

	LoggerPtr getLogger() ;

	const tstring& toString() const ;

	bool read( Msg_Connection_Handler& handler, Bit_Read_Buffer& stream , void* act );
	bool write( Msg_Connection_Handler& handler, Bit_Write_Buffer& stream , void* act );

	bool cancelread( );
	bool cancelwrite( );

	bool isReading() const;
	bool isWriting() const;

	int setFeature(const char* feature,
						bool value);

	int getFeature(const char* feature,
						bool& value) const;

	int setOption(const char* option,
					   void* value,
					   size_t size);

	int getOption(const char* option,
					   void* value,
					   size_t& size) const;
private:

	Instance_IM& instance_;
	BOE_Transport_Ptr transport_;
	Transport_Read_Protocol_Handler rd_;
	Transport_Write_Protocol_Handler wd_;
	tstring toString_;

	DECLARE_NO_COPY_CLASS( Msg_Connection );
};

typedef counter_ptr< Msg_Connection > Msg_Connection_Ptr;

_im_end

#endif // MSGCONNECTION_H
