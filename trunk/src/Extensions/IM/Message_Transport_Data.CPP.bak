

#include "Message_Transport_Data.H"
#include "BOE/Exception.hpp"

/**
 */
_im_begin

Message_Transport_Data::Message_Transport_Data( Instance_IM& instance , im_transport_ptr transport )
: instance_( instance )
, transport_( transport )
{
	if( isNone( transport_ ) )
		BT_LOG_ERROR_THROW( getLogger(), 
		toString() << BT_TEXT( "> 传输器不能为空") 
		, InvalidPointerException );
}

int Message_Transport_Data::open( )
{
	return 0;
}

void Message_Transport_Data::close( )
{
}

BOE_Pluggable_Messaging& Message_Transport_Data::getMessaging()
{
	return *Messaging_;
}

im_transport_type& Message_Transport_Data::getTransport()
{
	return *transport_;
}

void Message_Transport_Data::setTransportHandler( im_transport_handler_type& handle )
{
	transport_handler_ = &handle;
}

Transport_Protocol_State* Message_Transport_Data::state( int i )
{
	if( state_.size() < i )
		return 0;
	return state_[ i ];
}

const tstring& Message_Transport_Data::toString() const
{
	return toString_;
}

Message_Transport_Data::LoggerPtr Message_Transport_Data::getLogger()
{
	return instance_.getLogger();
}


_im_end
