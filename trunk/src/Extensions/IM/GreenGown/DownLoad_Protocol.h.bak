
#ifndef DownLoad_Protocol_H
#define DownLoad_Protocol_H

#include "config.h"

#if !defined (BOE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* BOE_LACKS_PRAGMA_ONCE */

// Include files
#include "config_GreenGown.H"
#include "../Instance_IM.H"
#include "BOE/Kernel/Kernel.h"
#include "../Message.h"
#include <list>

_greengown_begin

class DownLoadServer;

class DownLoad_Handler : public Msg_Connection_Handler
{
public:

	typedef Msg_Connection::LoggerPtr LoggerPtr;


	DownLoad_Handler( DownLoadServer& server );

	void onWriteMessage( Msg_Write_Result& result );

	void onReadMessage( Msg_Read_Result& result );
	void onReadPresent( Msg_Read_Result& result );
	void onReadIQ( Msg_Read_Result& result );
	void onReadX( Msg_Read_Result& result );
	void onException( Msg_Read_Result& result );

	int open( const tstring& name , Msg_Connection_Ptr connection );
	void close( );
	
	LoggerPtr getLogger();
	const tstring& toString() const;

private:
	bool running_;

	DownLoadServer& server_;
	Msg_Connection_Ptr connection_;
	tstring username_;
	tstring toString_;
	std::list< Message_Ptr > packets_;
	Message_Ptr read_packet_;
};

class DownLoad_Connect_Handler : public Msg_Connect_Handler
{
public:
	DownLoad_Connect_Handler( DownLoadServer& server );
	void onConnect( Msg_Connect_Result& result );
	const tstring& toString() const;
private:
	DownLoadServer& server_;
	tstring toString_;
};

typedef counter_ptr< DownLoad_Handler > DownLoad_Handler_Ptr;
typedef counter_ptr< DownLoad_Connect_Handler > DownLoad_Connect_Handler_Ptr;

_greengown_end

#endif // DownLoad_Protocol_H