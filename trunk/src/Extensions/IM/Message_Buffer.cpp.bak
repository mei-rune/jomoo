#include "StdAfx.h"
#include "message_buffer.h"
#include "BOE/exception.hpp"

_im_begin

Simple_Data_Block::Simple_Data_Block( Instance_IM& instance , Data_Block_Ptr ptr ,size_t begin , size_t end )
: instance_( instance )
, ptr_( ptr )
, begin_( begin )
, end_( end_ )
{
}

Simple_Data_Block::Simple_Data_Block( Instance_IM& instance, Data_Block_Ptr ptr ,size_t begin )
: instance_( instance )
, ptr_( ptr )
, begin_( begin )
, end_( ptr->length() )
{

}

const char* Simple_Data_Block::rd_ptr( ) const
{
	return ( ptr_->rd_ptr() + begin_ );
}

size_t Simple_Data_Block::length( ) const
{
	return ( end_-begin_ );
}

Simple_Data_Buffer::Simple_Data_Buffer( Instance_IM& instance )
: instance_( instance )
, buf_(  )
, begin_( 0 )
, end_( 0 )
{
}

Data_Buffer::~Data_Buffer()
{
	instance.release( data_ );
}

const char* Data_Buffer::rd_ptr( ) const
{
	return data_->buf + begin_;
}

void Data_Buffer::rd_ptr( size_t t )
{
	if( t > ( end_ - begin_ ) )
		ThrowException1( OutOfRangeException, "，可读数据没有那么长" );

	begin_ += t;
}

size_t Data_Buffer::length( ) const
{
	return ( end_ - begin_ );
}

char* Data_Buffer::wd_ptr()
{
	return ( data_->buf + end_ );
}

void Data_Buffer::wd_ptr( size_t t )
{
	if( t > ( data_->len - end_ ) )
		ThrowException1( OutOfRangeException, "，可读数据没有那么长" );
	begin_ += t;
}

size_t Data_Buffer::space( ) const
{
	return ( data_->len - end_ );
}

Message_Buffer::Message_Buffer(void)
: length_( 0 )
{
}

Message_Buffer::~Message_Buffer(void)
{
}

iovec* Message_Buffer::rd_vec( )
{
	return &data_vec_[0];
}

size_t Message_Buffer::rd_size( ) const
{
	return data_vec_.size();
}

size_t Message_Buffer::length( ) const
{
	return length_;
}

void Message_Buffer::push( Data_Block_Ptr data )
{
	if( isNone( data ) || data->length() == 0 )
		return ;
	raw_vec_.push_back( data );
	iovec v;
	v.buf = data->rd_ptr();
	v.len = data->length();
	data_vec_.push_back( v );
	length_ += v.len;
}

void Message_Buffer::pop( )
{
	if( raw_vec_.empty() )
		return ;

	iovec& v = data_vec_[ 0 ];
	length_ -= v.len;

	raw_vec_.erase( raw_vec_.begin() );
	data_vec_.erase( data_vec_.begin() );

}

void Message_Buffer::clear( )
{
	raw_vec_.clear();
	data_vec_.clear();
	length_ = 0;
}

Data_Block_Ptr Message_Buffer::operator[ ]( size_t n )
{
	try
	{
		return raw_vec_[ n ];
	}catch( std::exception& e )
	{
		ThrowException1( RuntimeException , e.what() );
	}
}

_im_end