

_micro_kernel_begin

template <class S>
inline typename S::ptr_type Context::component (void)	// Inlined for MSVC++
{
	return component<S> (S::classContextKey ());
}

template <class S>
inline typename S::ptr_type Context::component ( const ContextKey& index)
{
	ComponentPtr s = component (index);
	if( is_null( s ) )
		return typename S::ptr_type(( S*)0);
	return dynamicCast< S,Component >( s );
}

template <class S>
inline typename S::ptr_type Context::component (const tstring &index)
{
	ContextKey key( keymanger_, index );
	return component<S> ( key );
}

template <class S>
inline typename S::ptr_type Context::component ( const ContextKey& index, Context* &context)
{
	ComponentPtr s = component (index, context);
	if( is_null( s ) )
		return typename S::ptr_type(( S*)0);
	return dynamicCast< S,Component >( s );
}

template <class S>
inline typename S::ptr_type Context::component (const tstring &index, Context* &context)
{
	ContextKey key( keymanger_, index );
	return component<S> ( key , context);
}

template <class S>
inline typename S::ptr_type Context::componentLocal (void)	// Inlined for MSVC++
{
	return componentLocal<S> (S::classContextKey ());
}

template <class S>
inline typename S::ptr_type Context::componentLocal ( const ContextKey& index)
{
	ComponentPtr s = componentLocal (index);
	if( is_null( s ) )
		return (( S*)0);
	return dynamicCast< S,Component >( s );
}

template <class S>
inline typename S::ptr_type Context::componentLocal (const tstring &index)
{
	ContextKey key( keymanger_, index );
	return componentLocal<S> ( key );
}

template <class S>
inline void Context::queryLocal (std::vector< typename S::ptr_type > &matches)
{
	for (size_t i = 0; i < m_components_.size (); ++i) {
		if (S *s = dynamicCast<S ,Component > ( (*m_components_) [i].get ()))
			matches.push_back (s);
	}
}

template <class S>
inline void Context::query (std::vector< typename S::ptr_type > &matches)
{
	Context* c = this;
	for ( ; c ; c = c->parent() ) {
		c->queryLocal( matches );
		if ( ! matches.empty() )
			break;
	}
}

_micro_kernel_end

